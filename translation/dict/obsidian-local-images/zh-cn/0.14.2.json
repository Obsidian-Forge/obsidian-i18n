{
    "manifest": {
        "translationVersion": 1748935190050,
        "pluginVersion": "0.14.2"
    },
    "description": {
        "original": "Searches your notes for hotlinked images, downloads, saves them locally than fix tags in md-files.",
        "translation": "Searches your notes for hotlinked images, downloads, saves them locally than fix tags in md-files."
    },
    "dict": {
        "Notice(`Local Images \\nStart processing. Total ${pagesCount} pages. `, TIMEOUT_LIKE_INFINITY)": "Notice(`Local Images \\nStart processing. Total ${pagesCount} pages. `, TIMEOUT_LIKE_INFINITY)",
        "Notice(`Images for \"${file.path}\" were processed.`)": "Notice(`Images for \"${file.path}\" were processed.`)",
        "Notice(`Page \"${file.path}\" has been processed, but nothing was changed.`)": "Notice(`Page \"${file.path}\" has been processed, but nothing was changed.`)",
        "Notice(`LocalImages: Error while handling file ${file.name}, ${error.toString()": "Notice(`LocalImages: Error while handling file ${file.name}, ${error.toString()",
        "Notice(error.toString()": "Notice(error.toString()",
        ".log(value)": ".log(value)",
        ".log(options)": ".log(options)",
        ".log(tagName)": ".log(tagName)",
        ".log(\"start:\"+attrStr+\":end\")": ".log(\"start:\"+attrStr+\":end\")",
        ".error(value)": ".error(value)",
        "_error(error)": "_error(error)",
        "_error(new RequestError(error_.message, error_, this)": "_error(new RequestError(error_.message, error_, this)",
        "_error(new RequestError(error_.message, error, this)": "_error(new RequestError(error_.message, error, this)",
        "_error(typedError)": "_error(typedError)",
        ".error(\"Triyng to enqueue item with attempts < 1\")": ".error(\"Triyng to enqueue item with attempts < 1\")",
        ".error(`LocalImages: error: ${error}`)": ".error(`LocalImages: error: ${error}`)",
        "name: ' + name + '": "name: ' + name + '",
        "name: 'Error'": "name: 'Error'",
        "name: \"Download images locally\"": "name: \"Download images locally\"",
        "name: \"Download images locally for all your notes\"": "name: \"Download images locally for all your notes\"",
        "text: \"Local images\"": "text: \"本地图片\"",
        ".setName(\"On paste processing\")": ".setName(\"关于粘贴处理\")",
        ".setName(\"On paste processing interval\")": ".setName(\" 粘贴处理的时间间隔\")",
        ".setName(\"Attempts to process\")": ".setName(\"尝试处理\")",
        ".setName(\"Clean content\")": ".setName(\"干净的内容\")",
        ".setName(\"Show notifications\")": ".setName(\"显示通知\")",
        ".setName(\"Include\")": ".setName(\"包括\")",
        ".setName(\"Media folder\")": ".setName(\"媒体文件夹\")",
        ".setDesc(\"Process active page if external link was pasted.\")": ".setDesc(\"如果粘贴了外部链接，则处理活动页面。\")",
        ".setDesc(\"Interval in milliseconds for processing update.\")": ".setDesc(\"处理更新的间隔（毫秒）。\")",
        ".setDesc(\"Number of attempts to process content on paste. For me 3 attempts is enouth with 1 second update interval.\")": ".setDesc(\"处理粘贴内容的尝试次数。对我来说，3次尝试就足够了，更新间隔为1秒。\")",
        ".setDesc(\"Clean malformed image tags before processing.\")": ".setDesc(\"处理前清除格式错误的图像标签。\")",
        ".setDesc(\"Show notifications when pages were processed.\")": ".setDesc(\"处理页面时显示通知。\")",
        ".setDesc(\"Include only files matching this regex pattern when running on all notes.\")": ".setDesc(\"在所有笔记上运行时，仅包含与此正则表达式模式匹配的文件。\")",
        ".setDesc(\"Folder to keep all downloaded media files.\")": ".setDesc(\"用于保存所有下载媒体文件的文件夹。\")",
        ".setTooltip(\"I could not process content on the fly when it is pasted. So real processing implements periodically with the given here timeout.\")": ".setTooltip(\"粘贴内容时，我无法即时处理。因此，真正的处理是在给定的超时时间内定期实现的。\")",
        ".setTooltip(\"I could not find the way to access newly pasted content immediatily, after pasting, Plugin's API returns old text for a while. The workaround is to process page several times until content is changed.\")": ".setTooltip(\"我找不到立即访问新粘贴内容的方法，粘贴后，插件的API会返回旧文本一段时间。解决方法是多次处理页面，直到内容发生更改。\")"
    }
}