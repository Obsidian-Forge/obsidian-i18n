{
    "manifest": {
        "translationVersion": 1743666083312,
        "pluginVersion": "1.0.6"
    },
    "description": {
        "original": "Sync vault to personal GitHub.",
        "translation": "Sync vault to personal GitHub."
    },
    "dict": {
        "Notice(\"Syncing to GitHub remote\")": "Notice(\"同步到 GitHub 远程仓库\")",
        "Notice(\"Vault is not a Git repo or git binary cannot be found.\", 1e4)": "Notice(\"Vault 不是一个 Git 仓库或找不到 git 二进制文件。\", 1e4)",
        "Notice(e)": "Notice(e)",
        "Notice(\"Working branch clean\")": "Notice(\"工作分支干净\")",
        "Notice(e + \"\\nGitHub Sync: Invalid remote URL.\", 1e4)": "Notice(e + \"\\nGitHub Sync: Invalid remote URL.\", 1e4)",
        "Notice(\"GitHub Sync: Successfully set remote origin url\")": "Notice(\"GitHub 同步：成功设置远程原点 URL\")",
        "Notice(\"GitHub Sync: Pulled \" + update.summary.changes + \" changes\")": "Notice(\"GitHub Sync: Pulled \" + update.summary.changes + \" changes\")",
        "Notice(e2, 1e4)": "Notice(e2, 1e4)",
        "Notice(conflictMsg)": "Notice(conflictMsg)",
        "Notice(\"GitHub Sync: Pushed on \" + msg)": "Notice(\"GitHub Sync: Pushed on \" + msg)",
        "Notice(e, 1e4)": "Notice(e, 1e4)",
        "Notice(\"GitHub Sync: \" + statusUponOpening.behind + \" commits behind remote.\\nClick the GitHub ribbon icon to sync.\")": "Notice(\"GitHub Sync: \" + statusUponOpening.behind + \" commits behind remote.\\nClick the GitHub ribbon icon to sync.\")",
        "Notice(\"GitHub Sync: up to date with remote.\")": "Notice(\"GitHub 同步：与远程仓库保持最新。\")",
        "Notice(\"Auto sync enabled\")": "Notice(\"自动同步已启用\")",
        " log(`checking %s`, path)": " log(`checking %s`, path)",
        " log(`[OK] path represents a file`)": " log(`[OK] path represents a file`)",
        " log(`[OK] path represents a directory`)": " log(`[OK] path represents a directory`)",
        " log(`[FAIL] path represents something other than a file or directory`)": " log(`[FAIL] path represents something other than a file or directory`)",
        " log(`[FAIL] path is not accessible: %o`, e)": " log(`[FAIL] path is not accessible: %o`, e)",
        " log(`[FATAL] %o`, e)": " log(`[FATAL] %o`, e)",
        " log(name)": " log(name)",
        " log(...rest)": " log(...rest)",
        ".log(string, string)": ".log(string, string)",
        ".log({ from: string, to: string })": ".log({ from: string, to: string })",
        "_log();\n    init_merge()": "_log();\n    init_merge()",
        "_log();\n  }\n})": "_log();\n  }\n})",
        "_error();\n    GitResponseError = class extends GitError {\n      constructor(git2, message)": "_error();\n    GitResponseError = class extends GitError {\n      constructor(git2, message)",
        "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)": "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)",
        "_error();\n    EMPTY_COMMANDS = [];\n  }\n})": "_error();\n    EMPTY_COMMANDS = [];\n  }\n})",
        "_error();\n    init_git_logger()": "_error();\n    init_git_logger()",
        "_error();\n    init_task()": "_error();\n    init_task()",
        "_error();\n    init_utils()": "_error();\n    init_utils()",
        "_error();\n    init_parse_merge()": "_error();\n    init_parse_merge()",
        "_error();\n    init_parse_branch_delete()": "_error();\n    init_parse_branch_delete()",
        "_error();\n    init_parse_pull()": "_error();\n    init_parse_pull()",
        "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)": "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)",
        "_error();\ninit_git_error()": "_error();\ninit_git_error()",
        "_error();\ninit_task_configuration_error()": "_error();\ninit_task_configuration_error()",
        "_error();\nfunction isTaskError(result)": "_error();\nfunction isTaskError(result)",
        "_error();\nvar simpleGit = gitInstanceFactory;\n\n// node_modules/set-interval-async/dist/dynamic/set-interval-async.mjs\nvar import_clear_interval_async = __toESM(require_clear_interval_async()": "_error();\nvar simpleGit = gitInstanceFactory;\n\n// node_modules/set-interval-async/dist/dynamic/set-interval-async.mjs\nvar import_clear_interval_async = __toESM(require_clear_interval_async()",
        "name: \"Sync with Remote\"": "name: \"与远程同步\"",
        "text: \"How to use this plugin\"": "text: \"如何使用这个插件\"",
        "text: \"See the \"": "text: \"See the \"",
        "text: \"README\"": "text: \"README\"",
        "text: \" for more information and troubleshooting.\"": "text: \"更多信息和故障排除。\"",
        ".setName(\"Remote URL\")": ".setName(\"远程URL\")",
        ".setName(\"git binary location\")": ".setName(\"git二进制文件位置\")",
        ".setName(\"Check status on startup\")": ".setName(\"启动时检查状态\")",
        ".setName(\"Auto sync on startup\")": ".setName(\"启动时自动同步\")",
        ".setName(\"Auto sync at interval\")": ".setName(\"定时同步\")",
        ".setDesc(\"\").addText((text) => text.setPlaceholder(\"\")": ".setDesc(\"\").addText((text) => text.setPlaceholder(\"\")",
        ".setDesc(\"This is optional! Set this only if git is not findable via your system PATH, then provide its location here. See README for more info.\")": ".setDesc(\"这是可选的！仅当通过系统路径无法找到git时设置此选项，然后在这里提供其位置。有关更多信息，请参见README。\")",
        ".setDesc(\"Check to see if you are behind remote when you start Obsidian.\")": ".setDesc(\"启动 Obsidian 时，检查是否落后于远程。\")",
        ".setDesc(\"Automatically sync with remote when you start Obsidian if there are unsynced changes.\")": ".setDesc(\"在启动 Obsidian 时，如果有未同步的更改，则自动与远程同步。\")",
        ".setDesc(\"Set minute interval after which your vault is synced automatically. Auto sync is disabled if this field is left empty or not a positive integer. Restart Obsidan to take effect.\")": ".setDesc(\"设置自动同步间隔的分钟数。如果此字段为空或不是正整数，则禁用自动同步。重启Obsidian以生效。\")",
        ".setPlaceholder(\"\").setValue(this.plugin.settings.remoteURL).onChange(async (value) => {\n      this.plugin.settings.remoteURL = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text\")": ".setPlaceholder(\"\").setValue(this.plugin.settings.remoteURL).onChange(async (value) => {\n      this.plugin.settings.remoteURL = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text\")",
        ".setPlaceholder(\"\").setValue(this.plugin.settings.gitLocation).onChange(async (value) => {\n      this.plugin.settings.gitLocation = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text2\")": ".setPlaceholder(\"\").setValue(this.plugin.settings.gitLocation).onChange(async (value) => {\n      this.plugin.settings.gitLocation = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text2\")"
    }
}